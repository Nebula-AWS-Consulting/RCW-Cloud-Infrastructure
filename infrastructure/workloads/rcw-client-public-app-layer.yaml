AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 Buckets and Lambda Functions for Workload Application using AWS SAM

Parameters:
  Environment:
    Type: String
    Default: Dev
    Description: Environment name for the VPC

  EmailIdentityRecipientParameter:
    Type: String
    Description: Email address to be used for SES identity recipient

  EmailIdentitySenderParameter:
    Type: String
    Description: Email address to be used for SES identity sender

  PaypalSecret:
    Type: String
    Description: Paypal secret
  
  PayPalClientId:
    Type: String
    Description: Paypal client id

  ConfigurationSet:
    Type: String
    Default: my-first-configuration-set
    Description: Configuration set name for SES

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler
    Timeout: 30
    Tags:
      Environment: !Ref Environment

Resources:
  ### S3 Bucket for logs (Secured) ###
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rcw-log-bucket
      AccessControl: Private
      Tags:
        Infrastructure: RCW
        Component: Storage
        Name: RCW-LogBucket
        # Environment: !Ref Environment

  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        # Basic Lambda logging policy
        - PolicyName: BasicLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        
        # Cognito User Pool Permissions
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:*"
                Resource: "arn:aws:cognito-idp:*:*:userpool/us-west-1_lJ8JcxPXT"

         # SES Access Policy
        - PolicyName: SESAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource:
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${ConfigurationSet}"
      Tags:
        Infrastructure: RCW
        Component: Security
        Name: RCW-PublicBackendExecutionRole
        Environment: !Ref Environment

  ClientPublicBackendLayer:
      Type: AWS::Lambda::LayerVersion
      Properties:
        LayerName: ClientPublicBackendLayer
        Description: Layer for Lambda dependencies
        Content:
          S3Bucket: rcw-code-bucket
          S3Key: client-public-backend/dependencies.zip
        CompatibleRuntimes:
          - python3.8

  ### Lambda Function for Client Public Backend ###
  ClientPublicBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ClientPublicBackendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: s3://rcw-code-bucket/client-public-backend/function.zip
      Layers:
        - !Ref ClientPublicBackendLayer
      Events:
        SignupPost:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        SignupOptions:
          Type: Api
          Properties:
            Path: /signup
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUser:
          Type: Api
          Properties:
            Path: /confirm
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUserOptions:
          Type: Api
          Properties:
            Path: /confirm
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmail:
          Type: Api
          Properties:
            Path: /confirm-email
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailOptions:
          Type: Api
          Properties:
            Path: /confirm-email
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailResend:
          Type: Api
          Properties:
            Path: /confirm-email-resend
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailResendOptions:
          Type: Api
          Properties:
            Path: /confirm-email-resend
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        LoginUser:
          Type: Api
          Properties:
            Path: /login
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        LoginUserOptions:
          Type: Api
          Properties:
            Path: /login
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPassword:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPassword:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ContactUs:
          Type: Api
          Properties:
            Path: /contact-us
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ContactUsOptions:
          Type: Api
          Properties:
            Path: /contact-us
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UpdateUser:
          Type: Api
          Properties:
            Path: /user
            Method: PATCH
            RestApiId: !Ref ClientPublicBackendApi
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: DELETE
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UsersOptions:
          Type: Api
          Properties:
            Path: /user
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        PayPalCreateOrder:
          Type: Api
          Properties:
            Path: /create-paypal-order
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        PayPalCreateOrderOptions:
          Type: Api
          Properties:
            Path: /create-paypal-order
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        PayPalCreateSubscription:
          Type: Api
          Properties:
            Path: /create-paypal-subscription
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        PayPalCreateSubscriptionOptions:
          Type: Api
          Properties:
            Path: /create-paypal-subscription
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-PublicBackendFunction
        Environment: !Ref Environment

  ### API Gateway for Client Public Backend ###
  ClientPublicBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ClientPublicBackendApi
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowOrigin: '*'
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-PublicBackendAPI
        Environment: !Ref Environment

  ### SES Identities ###
  SESIdentityRecipent:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref EmailIdentityRecipientParameter
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-SES
        Environment: !Ref Environment
  
  SESIdentitySender:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref EmailIdentitySenderParameter
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-SES
        Environment: !Ref Environment

  ### SES Parameters ###
  SESRecipientParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rcw-client-backend/SESRecipientParameter
      Type: String
      Value: !Ref EmailIdentityRecipientParameter
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-Param
        Environment: !Ref Environment

    SESIdentitySenderParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rcw-client-backend/SESIdentitySenderParameter
      Type: String
      Value: !Ref EmailIdentitySenderParameter
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-Param
        Environment: !Ref Environment

  ### Paypal Parameters ###
  PaypalClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rcw-client-backend/PAYPAL_CLIENT_ID
      Type: SecureString
      Value: !Ref PayPalClientId
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-Param
        Environment: !Ref Environment

  PaypalSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /rcw-client-backend/PAYPAL_SECRET
      Type: SecureString
      Value: !Ref PaypalSecret
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-Param
        Environment: !Ref Environment

  # CodePipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: ClientBackendPublicPipeline
  #     RoleArn: !GetAtt CodePipelineExecutionRole.Arn
  #     ArtifactStore:
  #       Type: S3
  #       Location: rcw-code-bucket
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: SourceAction
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Provider: GitHubVersion2
  #               Version: 1
  #             OutputArtifacts:
  #               - Name: SourceOutput
  #             Configuration:
  #               RepositoryName: RCW-Infrastructure-Campaign
  #               Branch: main
  #               OAuthToken: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rcw-client-backend-codepipline-github-oath-key"
  #       - Name: Build
  #         Actions:
  #           - Name: BuildAction
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: 1
  #             InputArtifacts:
  #               - Name: SourceOutput
  #             OutputArtifacts:
  #               - Name: BuildOutput
  #             Configuration:
  #               ProjectName: RCWClientPublicBackendProject
  #               BuildSpec: src/server/buildspec.yml
  #       - Name: Deploy
  #         Actions:
  #           - Name: CodeDeployDeployAction
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: CodeDeploy
  #               Version: 1
  #             InputArtifacts:
  #               - Name: BuildOutput
  #             Configuration:
  #               ApplicationName: !Ref ClientPublicBackendApp
  #               DeploymentGroupName: ClientPublicBackendDeploymentGroup

  # CodePipelineExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: CodePipelineExecutionRole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codepipeline.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: CodePipelinePermissions
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             # S3 permissions for accessing artifacts
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #                 - s3:PutObject
  #                 - s3:ListBucket
  #               Resource:
  #                 - !Sub "arn:aws:s3:::rcw-code-bucket/client-public-backend"
  #                 - !Sub "arn:aws:s3:::rcw-code-bucket/client-public-backend/*"
  #             # CodeBuild permissions
  #             - Effect: Allow
  #               Action:
  #                 - codebuild:BatchGetBuilds
  #                 - codebuild:StartBuild
  #               Resource: "*"
  #             # Lambda permissions for updating function
  #             - Effect: Allow
  #               Action:
  #                 - lambda:UpdateFunctionCode
  #                 - lambda:GetFunction
  #                 - lambda:PublishVersion
  #                 - lambda:UpdateAlias
  #               Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ClientPublicBackendFunction}"
  #             # CloudWatch permissions for logging
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: "*"
  #             # IAM permissions for passing roles
  #             - Effect: Allow
  #               Action: iam:PassRole
  #               Resource: "*"
  #             # Get parameters from SSM
  #             - Effect: Allow
  #               Action: ssm:GetParameter
  #               Resource: "*"

  # ClientPublicBackendApp:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ComputePlatform: Lambda

  # CodeDeployServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: CodeDeployServiceRole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codedeploy.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       # CodeDeploy needs a policy that allows it to perform necessary actions
  #       - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  # ClientPublicBackendDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref ClientPublicBackendApp
  #     DeploymentGroupName: ClientPublicBackendDeploymentGroup
  #     ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
  #     DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
  #     DeploymentStyle:
  #       DeploymentType: BLUE_GREEN
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - DEPLOYMENT_FAILURE
  #     AlarmConfiguration:
  #       Enabled: false

  # CodeBuildExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: CodeBuildExecutionRole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codebuild.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: CodeBuildPermissions
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             # S3 permissions for accessing artifacts
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #                 - s3:PutObject
  #                 - s3:ListBucket
  #               Resource:
  #                 - !Sub "arn:aws:s3:::rcw-code-bucket"
  #                 - !Sub "arn:aws:s3:::rcw-code-bucket/*"
  #             # CloudWatch permissions for logging
  #             - Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #               Resource: "*"
  #             # CodePipeline permissions for interacting with CodePipeline artifacts
  #             - Effect: Allow
  #               Action:
  #                 - codepipeline:PutJobSuccessResult
  #                 - codepipeline:PutJobFailureResult
  #                 - codepipeline:PutThirdPartyJobSuccessResult
  #                 - codepipeline:PutThirdPartyJobFailureResult
  #               Resource: "*"
  #             # IAM permissions to pass the role
  #             - Effect: Allow
  #               Action: iam:PassRole
  #               Resource: "*"


  # RCWClientPublicBackendProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Name: RCWClientPublicBackendProject
  #     Source:
  #       Type: CODEPIPELINE
  #     Environment:
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/standard:5.0
  #       Type: LINUX_CONTAINER
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Cache:
  #       Type: NO_CACHE
  #     ServiceRole: !GetAtt CodeBuildExecutionRole.Arn

Outputs:
  LogBucketName:
    Value: !Ref LogBucket
    Description: "S3 Bucket for logs"

  ClientPublicBackendLambdaFunctionArn:
    Value: !GetAtt ClientPublicBackendFunction.Arn
    Description: "Lambda function ARN for Client Public Backend"

  ClientPublicBackendApiInvokeURL:
    Value: !Sub "https://${ClientPublicBackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Description: "Invoke URL for the Client Public Backend API"

  PaypalClientIdParameterValue:
    Value: !Ref PaypalClientIdParameter
    Description: "Paypal Client ID Parameter"

  PaypalSecretParameterValue:
    Value: !Ref PaypalSecretParameter
    Description: "Paypal Secret Parameter"
