AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 Buckets and Lambda Functions for Workload Application using AWS SAM

Parameters:
  Environment:
    Type: String
    Default: Dev
    Description: Environment name for the VPC

Globals:
  Function:
    Runtime: python3.8
    Handler: index.lambda_handler
    Timeout: 30
    Tags:
      Environment: !Ref Environment

Resources:
  ### S3 Bucket for logs (Secured) ###
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rcw-log-bucket
      AccessControl: Private
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        # Basic Lambda logging policy
        - PolicyName: BasicLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        
        # Cognito User Pool Permissions
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:*"
                Resource: "arn:aws:cognito-idp:*:*:userpool/us-west-1_lJ8JcxPXT"

         # SES Access Policy
        - PolicyName: SESAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource:
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/my-first-configuration-set"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ClientPublicBackendLayer:
      Type: AWS::Lambda::LayerVersion
      Properties:
        LayerName: ClientPublicBackendLayer
        Description: Layer for Lambda dependencies
        Content:
          S3Bucket: rcw-code-bucket
          S3Key: client-public-backend/dependencies.zip
        CompatibleRuntimes:
          - python3.8

  ### Lambda Function for Client Public Backend ###
  ClientPublicBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ClientPublicBackendFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: rcw-code-bucket
        S3Key: client-public-backend/function.zip
      Layers:
        - !Ref ClientPublicBackendLayer
      Events:
        SignupPost:
          Type: Api
          Properties:
            Path: /signup
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        SignupOptions:
          Type: Api
          Properties:
            Path: /signup
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUser:
          Type: Api
          Properties:
            Path: /confirm
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmUserOptions:
          Type: Api
          Properties:
            Path: /confirm
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmail:
          Type: Api
          Properties:
            Path: /confirm-email
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailOptions:
          Type: Api
          Properties:
            Path: /confirm-email
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailResend:
          Type: Api
          Properties:
            Path: /confirm-email-resend
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmEmailResendOptions:
          Type: Api
          Properties:
            Path: /confirm-email-resend
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        LoginUser:
          Type: Api
          Properties:
            Path: /login
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        LoginUserOptions:
          Type: Api
          Properties:
            Path: /login
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPassword:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPassword:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ConfirmForgotPasswordOptions:
          Type: Api
          Properties:
            Path: /confirm-forgot-password
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        ContactUs:
          Type: Api
          Properties:
            Path: /contact-us
            Method: POST
            RestApiId: !Ref ClientPublicBackendApi
        ContactUsOptions:
          Type: Api
          Properties:
            Path: /contact-us
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UpdateUser:
          Type: Api
          Properties:
            Path: /user
            Method: PATCH
            RestApiId: !Ref ClientPublicBackendApi
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: DELETE
            RestApiId: !Ref ClientPublicBackendApi
            RequestParameters:
              method.request.querystring.email: true
        UsersOptions:
          Type: Api
          Properties:
            Path: /user
            Method: OPTIONS
            RestApiId: !Ref ClientPublicBackendApi
      Tags:
        Environment: !Ref Environment

  ### API Gateway for Client Public Backend ###
  ClientPublicBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ClientPublicBackendApi
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - DELETE
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowOrigin: '*'
      Tags:
        Environment: !Ref Environment

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: ClientBackendPublicPipeline
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      ArtifactStore:
        Type: S3
        Location: rcw-code-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: RCW-Infrastructure-Campaign
                Branch: main
                OAuthToken: {{resolve:ssm-secure:/GitHub/OAuthToken:1}}
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: RCWClientPublicBackendProject
        - Name: Deploy
          Actions:
            - Name: DeployLambdaAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: Lambda
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                FunctionName: !Ref ClientPublicBackendFunction

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # S3 permissions for accessing artifacts
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::rcw-code-bucket/client-public-backend"
                  - !Sub "arn:aws:s3:::rcw-code-bucket/client-public-backend/*"

              # CodeBuild permissions
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"

              # Lambda permissions for updating function
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:PublishVersion
                  - lambda:UpdateAlias
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ClientPublicBackendFunction}"

              # CloudWatch permissions for logging
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

              # IAM permissions for passing roles
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"

              # Get parameters from SSM
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: "*"

  ClientPublicBackendApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Lambda

  ClientPublicBackendDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref ClientPublicBackendApp
      DeploymentGroupName: ClientPublicBackendDeploymentGroup
      ServiceRoleArn: !GetAtt CodePipelineExecutionRole.Arn
      DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      AlarmConfiguration:
        Enabled: false

  RCWClientPublicBackendProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RCWClientPublicBackendProject
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: NO_CACHE
      EnvironmentVariables:
        - Name: S3_BUCKET
          Value: rcw-code-bucket
      ServiceRole: !GetAtt CodePipelineExecutionRole.Arn
      BuildSpec: src/server/buildspec.yml




Outputs:
  LogBucketName:
    Value: !Ref LogBucket
    Description: "S3 Bucket for logs"

  ClientPublicBackendLambdaFunctionArn:
    Value: !GetAtt ClientPublicBackendFunction.Arn
    Description: "Lambda function ARN for Client Public Backend"

  ClientPublicBackendApiInvokeURL:
    Value: !Sub "https://${ClientPublicBackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Description: "Invoke URL for the Client Public Backend API"
