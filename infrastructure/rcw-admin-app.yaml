AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: S3 Buckets and Lambda Functions for Workload Application using AWS SAM

Parameters:
  Environment:
    Type: String
    Default: Dev
    Description: Environment name for the VPC

  TableName:
    Type: String
    Description: Table name for the application

Globals:
  Function:
    Runtime: python3.12
    Handler: index.lambda_handler
    Timeout: 30
    Tags:
      Environment: !Ref Environment
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"



Resources:
  ### Lambda Execution Role ###
  AdminAppLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AdminAppRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        # Basic Lambda logging policy
        - PolicyName: BasicLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

        # DynamoDB Access Policy (optional if you still use DynamoDB)
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/AdminTable-${Environment}"
                  - !Sub "arn:aws:dynamodb:*:*:table/SubscriptionsAndPayments-${Environment}"
      Tags:
        - Key: Infrastructure
          Value: RCW
        - Key: Component
          Value: Application
        - Key: Name
          Value: RCW-AdminAppRole
        - Key: Environment
          Value: !Ref Environment
        - Key: Description
          Value: Role for Admin App Lambda Function

  AdminAppFunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.12
      ContentUri: s3://rcw-code-bucket/admin-app/layer.zip

  ### Lambda Function for Admin App ###
  AdminAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "Admin-App-${Environment}"
      Role: !GetAtt AdminAppLambdaExecutionRole.Arn
      CodeUri: s3://rcw-code-bucket/admin-app/admin-app.zip
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Runtime: python3.12
      Layers:
        - !Ref AdminAppFunctionLayer
      Events:
        UploadItem:
          Type: Api
          Properties:
            Path: /upload-item
            Method: POST
        GetData:
          Type: Api
          Properties:
            Path: /get-data
            Method: GET
      Tags:
        Infrastructure: RCW
        Component: Application
        Name: RCW-AdminAppFunction
        Environment: !Ref Environment
        Description: Lambda function for Admin App which receives the webhook from Admin App and uploads donation data to data storage

Outputs:
  AdminAppFunctionArn:
    Value: !GetAtt AdminAppFunction.Arn
    Description: "Lambda function ARN for Admin App"

  ApiEndpoint:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"